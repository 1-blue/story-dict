name: CD with Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    types: [closed]
    branches: [ "master" ]

permissions:
  contents: read

env:
  SLACK_START_COLOR: "#6366f1"
  SLACK_SUCCESS_COLOR: "#22c55e"
  SLACK_FAILURE_COLOR: "#ef4444"
  SLACK_COMMON_FIELDS: |
    {
      "title": "${{ github.event_name == 'pull_request' && 'PR 제목' || '커밋 메시지' }}",
      "value": "${{ github.event_name == 'pull_request' && github.event.pull_request.title || github.event.head_commit.message }}",
      "short": true
    },
    {
      "title": "워크플로우",
      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/workflows/cicd.yaml|${{ github.workflow }} 워크플로우>",
      "short": true
    },
    {
      "title": "액션작업",
      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }} 작업>",
      "short": true
    },
    {
      "title": "레포지토리",
      "value": "<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>",
      "short": true
    },
    {
      "title": "${{ github.event_name == 'pull_request' && 'PR 브랜치' || '브랜치' }}",
      "value": "${{ github.event_name == 'pull_request' && format('{0} → {1}', github.event.pull_request.head.ref, github.event.pull_request.base.ref) || github.ref_name }}",
      "short": true
    }

jobs:
  Deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # 시작 시간 설정
    - name: Set start time
      run: |
        echo "TZ='Asia/Seoul'" >> $GITHUB_ENV
        echo "START_TIME=$(TZ='Asia/Seoul' date +%s)" >> $GITHUB_ENV
        echo "START_TIME_FORMATTED=$(TZ='Asia/Seoul' date '+%Y년 %m월 %d일 %H시 %M분 %S초')" >> $GITHUB_ENV

    # 액션 총 소요시간 계산
    - name: Calculate duration
      if: always()
      run: |
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        MINUTES=$((DURATION / 60))
        SECONDS=$((DURATION % 60))
        echo "DURATION=${MINUTES}분 ${SECONDS}초" >> $GITHUB_ENV

    # 배포 시작 알림
    - name: Notify Slack on Start
      id: slack-start
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "attachments": [
              {
                "color": "${{ env.SLACK_START_COLOR }}",
                "title": "🚀 배포 시작 🚀",
                "text": "${{ github.event_name == 'pull_request' && format('{0} → {1}', github.event.pull_request.head.ref, github.event.pull_request.base.ref) || github.ref_name }}",
                "fields": [
                  {
                    "title": "시작시간",
                    "value": "${{ env.START_TIME_FORMATTED }}",
                    "short": true
                  },
                  {
                    "title": "${{ github.event_name == 'pull_request' && 'PR 제목' || '커밋 메시지' }}",
                    "value": "${{ toJSON(github.event_name == 'pull_request' && github.event.pull_request.title || github.event.head_commit.message) }}",
                    "short": true
                  },
                  ${{ env.SLACK_COMMON_FIELDS }}
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOY_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Create Frontend env files
      run: |
        mkdir -p ./envs/fe
        mkdir -p ./apps/fe
        echo "${{ secrets.FRENTEND_ENV_FILE }}" > ./envs/fe/.env.production
        echo "${{ secrets.FRENTEND_ENV_FILE }}" > ./apps/fe/.env.production

    - name: Create Backend env files
      run: |
        mkdir -p ./envs/be
        mkdir -p ./apps/be
        echo "${{ secrets.BACKEND_ENV_FILE }}" > ./envs/be/.env.production
        echo "${{ secrets.BACKEND_ENV_FILE }}" > ./apps/be/.env.production

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Docker LogIn
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Build
      run: |
        docker buildx create --use
        DOCKER_DEFAULT_PLATFORM=linux/arm64 docker-compose build

    - name: Docker Push
      run: |
        docker-compose push

    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}

    # 보안 그룹에 인바운드 규칙 추가
    - name: Add GitHub Actions IP to Security Group
      run: |
        # GitHub Actions 러너의 공인 IP 주소 가져오기
        RUNNER_IP=$(curl -s https://api.ipify.org)
        echo "Add GitHub Actions IP to Security Group: $RUNNER_IP"
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr $RUNNER_IP/32

    # EC2 배포
    - name: Deploy Frontend And Backend
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AWS_EC2_SSH_DNS }} # EC2 IP 주소
        username: ${{ secrets.AWS_EC2_SSH_USER_NAME }} # EC2 사용자 이름
        key: ${{ secrets.AWS_EC2_SSH_PEM_KEY }} # EC2의 .pem 키
        port: ${{ secrets.AWS_EC2_SSH_PORT }} # EC2 포트
        script: |
          cd workspace &&
          sudo docker stop $(sudo docker ps -aq) || true &&
          sudo docker system prune -a --volumes -f &&
          sudo docker-compose up -d

    # 보안 그룹에서 인바운드 규칙 제거
    - name: Remove GitHub Actions IP from Security Group
      if: always()  # 이전 단계가 실패하더라도 항상 실행
      run: |
        RUNNER_IP=$(curl -s https://api.ipify.org)
        echo "Remove GitHub Actions IP from Security Group: $RUNNER_IP"
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr $RUNNER_IP/32

    # 배포 성공 알림
    - name: Notify Slack on Success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "attachments": [
              {
                "color": "${{ env.SLACK_SUCCESS_COLOR }}",
                "title": "⭕️ 배포 성공 ⭕️",
                "text": "${{ github.event_name == 'pull_request' && format('{0} → {1}', github.event.pull_request.head.ref, github.event.pull_request.base.ref) || github.ref_name }}",
                "fields": [
                  {
                    "title": "소요시간",
                    "value": "${{ env.DURATION }}",
                    "short": true
                  },
                  ${{ env.SLACK_COMMON_FIELDS }}
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOY_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    # 배포 실패 알림
    - name: Notify Slack on Failure
      if: failure()
      id: slack-failure
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "attachments": [
              {
                "color": "${{ env.SLACK_FAILURE_COLOR }}",
                "title": "❌ 배포 실패 ❌",
                "text": "${{ github.event_name == 'pull_request' && format('{0} → {1}', github.event.pull_request.head.ref, github.event.pull_request.base.ref) || github.ref_name }}",
                "fields": [
                  {
                    "title": "소요시간",
                    "value": "${{ env.DURATION }}",
                    "short": true
                  },
                  ${{ env.SLACK_COMMON_FIELDS }}
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOY_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK