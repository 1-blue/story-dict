name: CD with Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Create Frontend env files
      run: |
        mkdir -p ./envs/fe
        mkdir -p ./apps/fe
        echo "${{ secrets.FRENTEND_ENV_FILE }}" > ./envs/fe/.env.production
        echo "${{ secrets.FRENTEND_ENV_FILE }}" > ./apps/fe/.env.production

    - name: Create Backend env files
      run: |
        mkdir -p ./envs/be
        mkdir -p ./apps/be
        echo "${{ secrets.BACKEND_ENV_FILE }}" > ./envs/be/.env.production
        echo "${{ secrets.BACKEND_ENV_FILE }}" > ./apps/be/.env.production

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Docker LogIn
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Build
      run: |
        docker buildx create --use
        DOCKER_DEFAULT_PLATFORM=linux/arm64 docker-compose build

    - name: Docker Push
      run: |
        docker-compose push

    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}

    # 보안 그룹에 인바운드 규칙 추가
    - name: Add GitHub Actions IP to Security Group
      run: |
        # GitHub Actions 러너의 공인 IP 주소 가져오기
        RUNNER_IP=$(curl -s https://api.ipify.org)
        echo "Add GitHub Actions IP to Security Group: $RUNNER_IP"
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr $RUNNER_IP/32

    # EC2 배포
    - name: Deploy Frontend And Backend
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AWS_EC2_SSH_DNS }} # EC2 IP 주소
        username: ${{ secrets.AWS_EC2_SSH_USER_NAME }} # EC2 사용자 이름
        key: ${{ secrets.AWS_EC2_SSH_PEM_KEY }} # EC2의 .pem 키
        port: ${{ secrets.AWS_EC2_SSH_PORT }} # EC2 포트
        script: |
          cd workspace &&
          sudo docker stop $(sudo docker ps -aq) || true &&
          sudo docker system prune -a --volumes -f &&
          sudo docker-compose up -d

    # 보안 그룹에서 인바운드 규칙 제거
    - name: Remove GitHub Actions IP from Security Group
      if: always()  # 이전 단계가 실패하더라도 항상 실행
      run: |
        RUNNER_IP=$(curl -s https://api.ipify.org)
        echo "Remove GitHub Actions IP from Security Group: $RUNNER_IP"
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr $RUNNER_IP/32