name: CD

run-name: >-
  ${{ github.event_name == 'workflow_dispatch' && format('CD (수동): {0} → {1}', github.event.head_commit.message || github.ref_name, inputs.environment) ||
      github.event_name == 'workflow_call' && format('CD ({0}): {1} → {2}', inputs.triggered_by, github.event.head_commit.message || github.ref_name, inputs.environment) ||
      format('CD → {0}', inputs.environment || 'production') }}

on:
  workflow_call:
    inputs:
      environment:
        description: "배포 환경"
        required: true
        type: string
      triggered_by:
        description: "트리거 소스"
        required: false
        type: string
        default: "manual"
  workflow_dispatch:
    inputs:
      environment:
        description: "배포할 환경을 선택하세요"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read

env:
  # Slack 알림 색상 정의
  SLACK_START_COLOR: "#155dfc"
  SLACK_SUCCESS_COLOR: "#00a63e"
  SLACK_FAILURE_COLOR: "#e7000b"

  # Docker 관련 설정
  DOCKER_PLATFORM: "linux/arm64"
  DOCKER_COMPOSE_VERSION: "v2.24.5"

  # 프로젝트 관련 설정
  PROJECT_NAME: "story-dict"
  ECR_FE_REPO: "1-blue/story-dict-fe"
  ECR_BE_REPO: "1-blue/story-dict-be"

  # 시간대 설정
  TZ: "Asia/Seoul"

  # Slack 공통 필드 - 모든 알림에서 재사용
  SLACK_COMMON_FIELDS: |
    {
      "title": "배포 환경",
      "value": "${{ inputs.environment }}",
      "short": true
    },
    {
      "title": "트리거",
      "value": "${{ inputs.triggered_by }}",
      "short": true
    },
    {
      "title": "워크플로우",
      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/workflows/ci.yml|${{ github.workflow }} 워크플로우>",
      "short": true
    },
    {
      "title": "액션작업",
      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }} 작업>",
      "short": true
    },
    {
      "title": "브랜치",
      "value": "${{ github.ref_name }}",
      "short": true
    },
    {
      "title": "실행자",
      "value": "${{ github.actor }}",
      "short": true
    },
    {
      "title": "ECR 레포지토리",
      "value": "<https://ap-northeast-2.console.aws.amazon.com/ecr/private-registry/repositories?region=ap-northeast-2|ECR 레포>",
      "short": true
    },
    {
      "title": "S3 빌드 캐시",
      "value": "<https://ap-northeast-2.console.aws.amazon.com/s3/buckets/storydict?region=ap-northeast-2&bucketType=general&prefix=builds/&showversions=false|S3 캐시>",
      "short": true
    }

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Node.js 및 pnpm 설정 (터보 캐시 활용을 위해)
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "pnpm"

      # 의존성 설치
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # AWS CLI 설치/업데이트
      - name: Install/Update AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # 시작 시간 추적을 통한 배포 소요시간 계산
      - name: Set start time
        run: |
          echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "START_TIME_FORMATTED=$(date '+%Y년 %m월 %d일 %H시 %M분 %S초')" >> $GITHUB_ENV

      # 마지막 커밋 메시지 추출
      - name: Extract last commit message
        run: |
          SUBJECT=$(git log -1 --pretty=%s)
          echo "COMMIT_SUBJECT=$SUBJECT" >> $GITHUB_ENV

      # 배포 시작 알림
      - name: Notify Slack on Start
        id: slack-start
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ env.SLACK_START_COLOR }}",
                  "title": "🚀 배포 시작",
                  "text": "배포 환경: ${{ inputs.environment }}\n커밋: ${{ env.COMMIT_SUBJECT }}",
                  "fields": [
                    {
                      "title": "시작시간",
                      "value": "${{ env.START_TIME_FORMATTED }}",
                      "short": true
                    },
                    {
                      "title": "이미지 태그 (해시)",
                      "value": "${{ steps.source-hash.outputs.SOURCE_HASH }}",
                      "short": true
                    },
                    ${{ env.SLACK_COMMON_FIELDS }}
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOY_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # 소스코드 해시 계산 (CI와 동일한 방식)
      - name: Calculate source hash
        id: source-hash
        run: |
          SOURCE_HASH=$(find apps packages -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.prisma" | grep -v "/dist/" | grep -v "/.next/" | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "SOURCE_HASH=$SOURCE_HASH" >> $GITHUB_OUTPUT
          echo "계산된 소스코드 해시: $SOURCE_HASH"

      # 소스코드 해시로 S3 캐시 복원
      - name: Restore build cache from S3
        run: |
          SOURCE_HASH=${{ steps.source-hash.outputs.SOURCE_HASH }}
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET }}/builds/${SOURCE_HASH}.tar.gz; then
            echo "✅ 빌드 캐시 발견. 복원 중... (해시: $SOURCE_HASH)"
            aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/builds/${SOURCE_HASH}.tar.gz ./build-cache.tar.gz
            tar -xzf build-cache.tar.gz
            echo "BUILD_CACHE_HIT=true" >> $GITHUB_ENV
            echo "캐시 복원 완료"
          else
            echo "❌ 빌드 캐시 없음. 새로 빌드합니다 (해시: $SOURCE_HASH)"
            echo "BUILD_CACHE_HIT=false" >> $GITHUB_ENV
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # cache miss 시 빌드 실행
      - name: Build applications (cache miss)
        if: env.BUILD_CACHE_HIT == 'false'
        run: |
          echo "🔨 애플리케이션 빌드 중..."
          pnpm build

          SOURCE_HASH=${{ steps.source-hash.outputs.SOURCE_HASH }}
          echo "💾 S3에 빌드 캐시 저장 중..."
          tar -czf ${SOURCE_HASH}.tar.gz \
            --ignore-failed-read \
            apps/fe/.next \
            apps/fe/public \
            apps/be/dist \
            packages/database/dist

          aws s3 cp ${SOURCE_HASH}.tar.gz \
            s3://${{ secrets.AWS_S3_BUCKET }}/builds/

          echo "✅ 빌드 캐시 저장 완료 (해시: $SOURCE_HASH)"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Prisma 클라이언트 생성 (캐시 히트시에도 필요)
      - name: Generate Prisma client (always needed)
        run: pnpm db:generate

      # 환경 파일 설정
      - name: Create Frontend env files
        run: |
          mkdir -p ./envs/fe ./apps/fe
          echo "${{ secrets.FRENTEND_ENV_FILE }}" > ./envs/fe/.env.production
          echo "${{ secrets.FRENTEND_ENV_FILE }}" > ./apps/fe/.env.production

      - name: Create Backend env files
        run: |
          mkdir -p ./envs/be ./apps/be
          echo "${{ secrets.BACKEND_ENV_FILE }}" > ./envs/be/.env.production
          echo "${{ secrets.BACKEND_ENV_FILE }}" > ./apps/be/.env.production

      # Docker Compose 최신 버전 설치
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # AWS 인증 및 ECR 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # QEMU 설정 (ARM64 빌드를 위해)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: "arm64,arm"

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 전체 이미지 빌드
      - name: Build and tag images
        run: |
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          SOURCE_HASH=${{ steps.source-hash.outputs.SOURCE_HASH }}

          # Docker Compose 빌드 (플랫폼 설정)
          DOCKER_DEFAULT_PLATFORM=${{ env.DOCKER_PLATFORM }} docker-compose build

          # FE 이미지 태그 설정 (소스 해시 사용)
          docker tag ${{ env.ECR_FE_REPO }}:latest $ECR_REGISTRY/${{ env.ECR_FE_REPO }}:latest
          docker tag ${{ env.ECR_FE_REPO }}:latest $ECR_REGISTRY/${{ env.ECR_FE_REPO }}:${SOURCE_HASH}

          # BE 이미지 태그 설정 (소스 해시 사용)
          docker tag ${{ env.ECR_BE_REPO }}:latest $ECR_REGISTRY/${{ env.ECR_BE_REPO }}:latest
          docker tag ${{ env.ECR_BE_REPO }}:latest $ECR_REGISTRY/${{ env.ECR_BE_REPO }}:${SOURCE_HASH}

      # ECR에 이미지 푸시
      - name: Push images to ECR
        run: |
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          SOURCE_HASH=${{ steps.source-hash.outputs.SOURCE_HASH }}

          # FE 이미지 푸시
          docker push $ECR_REGISTRY/${{ env.ECR_FE_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_FE_REPO }}:${SOURCE_HASH}

          # BE 이미지 푸시
          docker push $ECR_REGISTRY/${{ env.ECR_BE_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_BE_REPO }}:${SOURCE_HASH}

      # 동적 보안 그룹 관리로 SSH 접근 제한
      - name: Add GitHub Actions IP to Security Group
        id: add-ip
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          echo "보안 그룹에 GitHub Actions IP 추가 중: $RUNNER_IP"

          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32

      # SSH를 통한 EC2 배포 및 ECR 이미지 자동 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_SSH_DNS }}
          username: ${{ secrets.AWS_EC2_SSH_USER_NAME }}
          key: ${{ secrets.AWS_EC2_SSH_PEM_KEY }}
          port: ${{ secrets.AWS_EC2_SSH_PORT }}
          script: |
            cd workspace

            # ECR 인증 및 로그인
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            # 기존 컨테이너 정리
            sudo docker stop $(sudo docker ps -aq) || true
            sudo docker system prune -a --volumes -f

            # 최신 이미지로 서비스 시작
            sudo docker-compose pull
            sudo docker-compose up -d

            # 서비스 상태 확인
            sudo docker-compose ps

      # 보안 그룹 정리 (실패 시에도 실행)
      - name: Remove GitHub Actions IP from Security Group
        if: always()
        run: |
          echo "보안 그룹에서 GitHub Actions IP 제거 중: ${{ env.RUNNER_IP }}"
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ env.RUNNER_IP }}/32 || true

      # 배포 소요시간 계산
      - name: Calculate duration
        if: always()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          MINUTES=$((DURATION / 60))
          SECONDS=$((DURATION % 60))
          echo "DURATION=${MINUTES}분 ${SECONDS}초" >> $GITHUB_ENV
          echo "총 배포 시간: ${MINUTES}분 ${SECONDS}초"

      # 배포 결과 알림 ( 성공/실패 통합 )
      - name: Notify Slack on Completion
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && env.SLACK_SUCCESS_COLOR || env.SLACK_FAILURE_COLOR }}",
                  "title": "${{ job.status == 'success' && '✅ 배포 성공' || '❌ 배포 실패' }}",
                  "text": "배포 환경: ${{ inputs.environment }}\n커밋: ${{ env.COMMIT_SUBJECT }}\n상태: ${{ job.status }}",
                  "fields": [
                    {
                      "title": "소요시간",
                      "value": "${{ env.DURATION }}",
                      "short": true
                    },
                    {
                      "title": "이미지 태그 (해시)",
                      "value": "${{ steps.source-hash.outputs.SOURCE_HASH }}",
                      "short": true
                    },
                    ${{ env.SLACK_COMMON_FIELDS }}
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOY_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
