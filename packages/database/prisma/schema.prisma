generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 유저 역할
enum UserRole {
  /// 관리자
  ADMIN
  /// 일부 권한을 부여받은 유저
  MANAGER
  /// 일반 유저
  USER
  /// 로그인하지 않고 체험으로 사용하는 유저 ( 1일 )
  GUEST
}

/// 유저 로그인 방식
enum UserProvider {
  /// 일반 로그인 ( 이메일 + 비밀번호 )
  LOCAL
  /// 카카오 로그인
  KAKAO
  /// 구글 로그인
  GOOGLE
}

/// 게시글 카테고리
enum PostCategory {
  /// 상식
  GENERAL_KNOWLEDGE
  /// 어원
  ETYMOLOGY
  /// 순우리말
  PURE_KOREAN
  /// 명대사
  QUOTATION
  /// 단순 정보
  INFORMATION
  /// 넌센스
  NONSENSE
}

enum ReactionType {
  /// 좋아요 👍
  GOOD
  /// 싫어요 👎
  BAD
  /// 불타오르다 🔥
  FIRE
  /// 보다 👀
  SEE
  /// 하트 ❤️
  HEART
  /// 웃다 😊
  SMILE
  /// 슬프다 😢
  SAD
  /// 화나다 😠
  ANGRY
  /// 놀랐다 🫢
  WOW
  /// 의문 🤔
  QUESTION
}

/// 유저 모델
model User {
  /// 유저 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 유저 이메일
  email      String       @unique
  /// 유저 비밀번호
  password   String
  /// 유저 소지금
  money      Int          @default(1000)
  /// 유저 닉네임
  nickname   String       @unique
  /// 유저 휴대폰 번호
  phone      String?      @unique
  /// 유저 역할
  role       UserRole
  /// 유저 이미지 경로
  imagePath  String?
  /// 유저 로그인 방식
  provider   UserProvider
  /// 유저 로그인 방식 식별자 ( `OAuth`인 경우 제공받는값 )
  providerId String?      @unique

  /// [1:N] 유저의 게시글
  posts         Post[]
  /// [1:N] 유저의 게시글 반응
  postReactions PostReaction[]

  /// [1:N] 유저의 댓글
  comments         Comment[]
  /// [1:N] 유저의 댓글 반응
  commentReactions CommentReaction[]

  /// [1:N] 유저의 대댓글
  replies        Reply[]
  /// [1:N] 유저의 대댓글 반응
  replyReactions ReplyReaction[]
}

model Post {
  /// 게시글 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 게시글 제목
  title         String       @unique
  /// 게시글 요약
  summary       String
  /// 게시글 내용
  content       String
  /// 게시글 썸네일 이미지 경로
  thumbnailPath String?
  /// 게시글 카테고리
  category      PostCategory @default(GENERAL_KNOWLEDGE)

  /// [1:N] 게시글의 유저
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// [1:N] 유저 식별자
  userId String

  /// [1:N] 게시글의 반응
  reactions PostReaction[]

  /// [1:N] 게시글의 댓글
  comments Comment[]

  /// [1:N] 게시글의 대댓글
  replies Reply[]

  /// [1:N] 게시글의 댓글 반응
  commentReactions CommentReaction[]

  /// [1:N] 게시글의 댓글의 대댓글 반응
  replyReactions ReplyReaction[]
}

model PostReaction {
  /// 반응 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 리액션 타입
  type ReactionType

  /// 반응 유저
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// [1:N] 유저 식별자
  userId String

  /// [1:N] 반응 게시글
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// [1:N] 게시글 식별자
  postId String
}

model Comment {
  /// 댓글 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 댓글 내용
  content String

  /// [1:N] 댓글의 유저
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// [1:N] 유저 식별자
  userId String

  /// [1:N] 댓글의 게시글
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// [1:N] 게시글 식별자
  postId String

  /// [1:N] 댓글의 대댓글
  replies Reply[]

  /// [1:N] 댓글의 반응
  reactions CommentReaction[]

  /// [1:N] 댓글의 대댓글 반응
  replyReactions ReplyReaction[]
}

model CommentReaction {
  /// 반응 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 리액션 타입
  type ReactionType

  /// 반응 유저
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// [1:N] 유저 식별자
  userId String

  /// [1:N] 반응 게시글
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// [1:N] 게시글 식별자
  postId String

  /// [1:N] 반응 댓글
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  /// [1:N] 댓글 식별자
  commentId String
}

model Reply {
  /// 대댓글 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 대댓글 내용 
  content String

  /// [1:N] 대댓글의 유저
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// [1:N] 유저 식별자
  userId String

  /// [1:N] 대댓글의 게시글
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// [1:N] 게시글 식별자
  postId String

  /// [1:N] 대댓글의 댓글
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  /// [1:N] 댓글 식별자
  commentId String

  /// [1:N] 대댓글의 반응
  reactions ReplyReaction[]
}

model ReplyReaction {
  /// 반응 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 리액션 타입
  type ReactionType

  /// 반응 유저
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// [1:N] 유저 식별자
  userId String

  /// [1:N] 반응 게시글
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// [1:N] 게시글 식별자
  postId String

  /// [1:N] 반응 댓글
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  /// [1:N] 댓글 식별자
  commentId String

  /// [1:N] 반응 대댓글
  reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  /// [1:N] 대댓글 식별자
  replyId String
}
