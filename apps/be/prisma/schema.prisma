generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// [테스트용] 고양이 모델
model Cat {
  /// 고양이 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 고양이 이름
  name   String  @unique
  /// 고양이 나이
  age    Int
  /// 고양이 성별
  gender Boolean @default(true)
}

/// 이미지 저장 상태
enum ImageStatus {
  /// 공용으로 사용할 기본 이미지
  DEFAULT
  /// 임시 저장 ( 게시글 업로드 시 썸네일 입력 후 생성 취소한 경우 )
  TEMP
  /// 실제로 사용되는 이미지
  USE
  /// 실제로 사용되다가 중지된 이미지 ( 업로드된 게시글을 지운 경우 썸네일 이미지 )
  DELETED
  /// 외부에서 제공받은 이미지인지 확인할 값 ( 내 S3에 업로드된 이미지가 아닌 경우 )
  EXTERNAL
}

/// 이미지 사용 목적
enum ImagePurpose {
  /// 유저 프로필 이미지
  USER_PROFILE
}

/// 이미지 모델
model Image {
  /// 이미지 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 이미지 URL
  url     String       @unique
  /// 이미지 원본 파일명
  name    String
  /// 이미지 저장 상태
  status  ImageStatus  @default(TEMP)
  /// 이미지 사용 목적
  purpose ImagePurpose @default(USER_PROFILE)

  /// [1:N] 연결된 유저
  users User[]
  /// [1:N] 연결된 게시글
  posts Post[]
}

/// 유저 역할
enum UserRole {
  /// 관리자
  ADMIN
  /// 일부 권한을 부여받은 유저
  MANAGER
  /// 일반 유저
  USER
  /// 로그인하지 않고 체험으로 사용하는 유저 ( 1일 )
  GUEST
}

/// 유저 로그인 방식
enum UserProvider {
  /// 일반 로그인 ( 이메일 + 비밀번호 )
  LOCAL
  /// 카카오 로그인
  KAKAO
  /// 구글 로그인
  GOOGLE
}

/// 유저 모델
model User {
  /// 유저 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 유저 이메일
  email      String       @unique
  /// 유저 비밀번호
  password   String
  /// 유저 소지금
  money      Int          @default(1000)
  /// 유저 닉네임
  nickname   String       @unique
  /// 유저 휴대폰 번호
  phone      String?      @unique
  /// 유저 역할
  role       UserRole
  /// 유저 로그인 방식
  provider   UserProvider
  /// 유저 로그인 방식 식별자 ( `OAuth`인 경우 제공받는값 )
  providerId String?      @unique

  /// [1:N] 유저의 이미지
  image   Image?  @relation(fields: [imageId], references: [id])
  /// [1:N] 이미지 식별자
  imageId String?

  /// [1:N] 유저의 게시글
  Post Post[]
}

/// 게시글 카테고리
enum PostCategory {
  /// 상식 관련 게시글
  GENERAL_KNOWLEDGE
  /// 어원 관련 게시글
  ETYMOLOGY
  /// 순우리말 관련 게시글
  PURE_KOREAN
}

model Post {
  /// 게시글 식별자
  id        String    @id @default(uuid())
  /// 생성 일자
  createdAt DateTime  @default(now())
  /// 수정 일자
  updatedAt DateTime  @updatedAt
  /// 삭제 일자
  deletedAt DateTime?

  /// 게시글 제목
  title       String
  /// 게시글 내용
  content     String
  /// 게시글 카테고리
  category    PostCategory @default(GENERAL_KNOWLEDGE)
  /// 게시글 썸네일 이미지
  thumbnail   Image?       @relation(fields: [thumbnailId], references: [id])
  /// [1:N] 이미지 식별자
  thumbnailId String?

  /// [1:N] 게시글의 유저
  user   User   @relation(fields: [userId], references: [id])
  /// [1:N] 유저 식별자
  userId String
}
